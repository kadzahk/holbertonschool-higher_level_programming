============================
The ``1-my_list`` module
============================

>>> MyList = __import__('1-my_list').MyList

>>> my_list = MyList()

>>> type(my_list)
<class '1-my_list.MyList'>

>>> type(MyList())
<class '1-my_list.MyList'>

>>> issubclass(MyList, list)
True

>>> 'print_sorted' in dir(MyList)
True

>>> 'print_sorted' in dir(my_list)
True

>>> print(my_list)
[]
>>> my_list += [1, 4, 2, 3, 5]
>>> print(my_list)
[1, 4, 2, 3, 5]

>>> my_list.print_sorted()
[1, 2, 3, 4, 5]



>>> my_list = MyList([1, 4, 2, 3, 5])
>>> print(my_list)
[1, 4, 2, 3, 5]
>>> my_list += [-1]
>>> print(my_list)
[1, 4, 2, 3, 5, -1]
>>> my_list.print_sorted()
[-1, 1, 2, 3, 4, 5]

Test for zero:

>>> my_list = MyList([1, 4, 2, 3, 5])
>>> print(my_list)
[1, 4, 2, 3, 5]
>>> my_list += [0]
>>> print(my_list)
[1, 4, 2, 3, 5, 0]
>>> my_list.print_sorted()
[0, 1, 2, 3, 4, 5]

Test for empty list:

>>> my_list = MyList([])
>>> print(my_list)
[]
>>> my_list += [1]
>>> print(my_list)
[1]
>>> my_list.print_sorted()
[1]

Test for list of one:

>>> my_list = MyList([1])
>>> print(my_list)
[1]
>>> my_list += [2]
>>> print(my_list)
[1, 2]
>>> my_list.print_sorted()
[1, 2]

Test for list of one with append():

>>> my_list = MyList([1])
>>> print(my_list)
[1]
>>> my_list.append(2)
>>> print(my_list)
[1, 2]
>>> my_list.print_sorted()
[1, 2]

Test that print_sorted() returns a new list
-------------------------------------------

>>> my_list = MyList()
>>> print(my_list)
[]
>>> my_list += [1, 4, 2, 3, 5]
>>> print(my_list)
[1, 4, 2, 3, 5]
>>> my_list.print_sorted()
[1, 2, 3, 4, 5]
>>> my_list.print_sorted() == my_list
[1, 2, 3, 4, 5]
False

my_list is already sorted:

>>> my_list = MyList()
>>> print(my_list)
[]
>>> my_list += [1, 2, 3, 4, 5]
>>> print(my_list)
[1, 2, 3, 4, 5]
>>> my_list.print_sorted()
[1, 2, 3, 4, 5]
>>> my_list.print_sorted() == my_list
[1, 2, 3, 4, 5]
False

Test with print_sorted() on empty list
--------------------------------------

>>> my_list = MyList()
>>> print(my_list)
[]
>>> my_list.print_sorted()
[]